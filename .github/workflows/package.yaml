name: Package Onelens-Agent Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  validate-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install yq for YAML manipulation
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Validate Chart.yaml, Chart.lock, and version.md
        id: validate
        run: |
          git fetch origin ${{ github.event.before }}

          mkdir -p tmp/old tmp/new

          # Get previous version files, fallback to default if not found
          git show ${{ github.event.before }}:charts/onelens-agent/Chart.yaml > tmp/old/Chart.yaml || echo '{}' > tmp/old/Chart.yaml
          git show ${{ github.event.before }}:charts/onelens-agent/Chart.lock > tmp/old/Chart.lock || echo '{}' > tmp/old/Chart.lock
          git show ${{ github.event.before }}:charts/onelens-agent/version.md > tmp/old/version.md || echo '' > tmp/old/version.md

          # Copy current files
          cp charts/onelens-agent/Chart.yaml tmp/new/Chart.yaml
          cp charts/onelens-agent/Chart.lock tmp/new/Chart.lock
          cp charts/onelens-agent/version.md tmp/new/version.md

          # Extract versions
          old_version=$(yq e '.version' tmp/old/Chart.yaml)
          new_version=$(yq e '.version' tmp/new/Chart.yaml)

          old_app_version=$(yq e '.appVersion' tmp/old/Chart.yaml)
          new_app_version=$(yq e '.appVersion' tmp/new/Chart.yaml)

          echo "Old version: $old_version"
          echo "New version: $new_version"
          echo "Old appVersion: $old_app_version"
          echo "New appVersion: $new_app_version"

          version_gt() {
            test "$(printf '%s\n%s\n' "$1" "$2" | sort -V | head -n1)" != "$2"
          }

          # Print dependencies with versions for clarity
          echo "Old dependencies (name:version):"
          yq e '.dependencies[] | "\(.name):\(.version)"' tmp/old/Chart.yaml || echo "None"
          echo "New dependencies (name:version):"
          yq e '.dependencies[] | "\(.name):\(.version)"' tmp/new/Chart.yaml || echo "None"

          old_deps=$(yq e '.dependencies[] | "\(.name):\(.version)"' tmp/old/Chart.yaml | sort || echo '')
          new_deps=$(yq e '.dependencies[] | "\(.name):\(.version)"' tmp/new/Chart.yaml | sort || echo '')

          dep_changed=false
          while IFS= read -r dep; do
            name=$(echo "$dep" | cut -d':' -f1)
            new_ver=$(echo "$new_deps" | grep "^$name:" | cut -d':' -f2)
            old_ver=$(echo "$old_deps" | grep "^$name:" | cut -d':' -f2)

            if [ "$new_ver" != "$old_ver" ]; then
              echo "Dependency '$name' changed from $old_ver to $new_ver"
              dep_changed=true
            fi
          done <<< "$new_deps"

          if [ "$dep_changed" = false ]; then
            echo "ℹ️ No dependency changes detected."

            if [ "$old_version" != "$new_version" ] || [ "$old_app_version" != "$new_app_version" ]; then
              echo "⚠️ Version or appVersion changed without dependency change."
              echo "changed=true" >> $GITHUB_ENV
            else
              echo "ℹ️ No significant changes. Nothing to do."
              echo "changed=false" >> $GITHUB_ENV
              exit 0
            fi
          else
            echo "ℹ️ Dependencies changed, verifying version and version.md updates..."

            if version_gt "$new_version" "$old_version" && version_gt "$new_app_version" "$old_app_version"; then
              echo "✅ version and appVersion correctly bumped."
            else
              echo "❌ version or appVersion NOT properly increased after dependency change."
              exit 1
            fi

            if ! grep -q "$new_version" tmp/new/version.md; then
              echo "❌ version.md does NOT contain an entry for $new_version"
              exit 1
            fi
            echo "✅ version.md entry found for $new_version"

            # Compare Chart.yaml and Chart.lock deps (ignore alias/condition)
            chart_deps=$(yq e '.dependencies[] | "\(.name):\(.version)"' tmp/new/Chart.yaml | sort)
            lock_deps=$(yq e '.dependencies[] | "\(.name):\(.version)"' tmp/new/Chart.lock | sort)

            echo "Chart.yaml deps (name:version):"
            echo "$chart_deps"
            echo "Chart.lock deps (name:version):"
            echo "$lock_deps"

            if [ "$chart_deps" != "$lock_deps" ]; then
              echo "❌ Chart.yaml and Chart.lock dependencies mismatch"
              exit 1
            fi
            echo "✅ Chart.yaml and Chart.lock dependencies match"

            echo "changed=true" >> $GITHUB_ENV
          fi

      - name: Set up Helm
        if: env.changed == 'true'
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Clone onelens-installation-scripts Repo
        if: env.changed == 'true'
        run: |
          git clone git@github.com:astuto-ai/onelens-installation-scripts.git

      - name: Update Helm Dependencies
        if: env.changed == 'true'
        run: |
          cd onelens-installation-scripts/charts/onelens-agent
          helm dependency update

      - name: Package Helm Chart
        if: env.changed == 'true'
        run: |
          cd onelens-installation-scripts/charts/onelens-agent
          helm package .

      - name: Update Helm Repo Index
        if: env.changed == 'true'
        run: |
          cd onelens-installation-scripts/charts/onelens-agent
          helm repo index . --url https://astuto-ai.github.io/onelens-installation-scripts/

      - name: Upload Packaged Chart as Artifact
        if: env.changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: packaged-onelens-agent-chart
          path: onelens-installation-scripts/charts/onelens-agent/*.tgz
