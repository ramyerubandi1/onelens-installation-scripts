name: Package Onelens-Agent Helm Chart

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  validate-and-package:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to access previous commits

      - name: Install yq for YAML manipulation
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.40.5/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.3

      - name: Check if dependency version changed but chart version not updated
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          
          # Get the previous commit
          PREV_COMMIT=$(git rev-parse HEAD^)

          # Check if the Chart.yaml file was changed
          if git diff --quiet "$PREV_COMMIT" -- "$CHART_FILE"; then
            echo "No changes to $CHART_FILE detected. Skipping version check."
            exit 0
          fi

          # Extract current and previous values
          OLD_DEP_VERSIONS=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.dependencies[].version')
          NEW_DEP_VERSIONS=$(cat "$CHART_FILE" | yq '.dependencies[].version')

          OLD_CHART_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.version')
          NEW_CHART_VERSION=$(cat "$CHART_FILE" | yq '.version')

          OLD_APP_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.appVersion')
          NEW_APP_VERSION=$(cat "$CHART_FILE" | yq '.appVersion')

          if [ "$OLD_DEP_VERSIONS" != "$NEW_DEP_VERSIONS" ]; then
            echo "‚ö†Ô∏è Detected a change in dependency versions."
            if [ "$OLD_CHART_VERSION" = "$NEW_CHART_VERSION" ] || [ "$OLD_APP_VERSION" = "$NEW_APP_VERSION" ]; then
              echo "‚ùå Dependency version changed, but version or appVersion not updated."
              echo "Old Chart version: $OLD_CHART_VERSION"
              echo "New Chart version: $NEW_CHART_VERSION"
              echo "Old App version: $OLD_APP_VERSION"
              echo "New App version: $NEW_APP_VERSION"
              exit 1
            fi
          fi

      - name: Check if dependency version changed but chart version not updated
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          VERSION_FILE="charts/onelens-agent/version.md"
          
          PREV_COMMIT=$(git rev-parse HEAD^)

          if git diff --quiet "$PREV_COMMIT" -- "$CHART_FILE"; then
            echo "No changes to $CHART_FILE detected. Skipping version check."
            exit 0
          fi

          OLD_DEP_VERSIONS=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.dependencies[].version')
          NEW_DEP_VERSIONS=$(cat "$CHART_FILE" | yq '.dependencies[].version')

          OLD_CHART_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.version')
          NEW_CHART_VERSION=$(cat "$CHART_FILE" | yq '.version')

          OLD_APP_VERSION=$(git show "$PREV_COMMIT:$CHART_FILE" | yq '.appVersion')
          NEW_APP_VERSION=$(cat "$CHART_FILE" | yq '.appVersion')

          if [ "$OLD_DEP_VERSIONS" != "$NEW_DEP_VERSIONS" ]; then
            echo "‚ö†Ô∏è Detected a change in dependency versions."
            if [ "$OLD_CHART_VERSION" = "$NEW_CHART_VERSION" ] || [ "$OLD_APP_VERSION" = "$NEW_APP_VERSION" ]; then
              echo "‚ùå Dependency version changed, but version or appVersion not updated."
              echo "Old Chart version: $OLD_CHART_VERSION"
              echo "New Chart version: $NEW_CHART_VERSION"
              echo "Old App version: $OLD_APP_VERSION"
              echo "New App version: $NEW_APP_VERSION"
              exit 1
            fi
          fi

          if [ "$OLD_CHART_VERSION" != "$NEW_CHART_VERSION" ]; then
            echo "üßê Chart version changed from $OLD_CHART_VERSION to $NEW_CHART_VERSION"

            if ! grep -q "$NEW_CHART_VERSION" "$VERSION_FILE"; then
              echo "‚ùå Chart version updated to $NEW_CHART_VERSION, but version.md does not contain it."
              exit 1
            else
              echo "‚úÖ version.md contains the updated Chart version $NEW_CHART_VERSION"
            fi
          fi

      - name: Check if Chart.lock matches updated dependencies in Chart.yaml
        run: |
          CHART_FILE="charts/onelens-agent/Chart.yaml"
          LOCK_FILE="charts/onelens-agent/Chart.lock"

          PREV_COMMIT=$(git rev-parse HEAD^)

          if git diff --quiet "$PREV_COMMIT" -- "$CHART_FILE"; then
            echo "No changes to $CHART_FILE detected. Skipping lock check."
            exit 0
          fi

          # Extract and sort dependencies from Chart.yaml
          YAML_DEPS=$(yq '.dependencies[] | "\(.name):\(.version)"' "$CHART_FILE" | sort)

          # Extract and sort dependencies from Chart.lock
          LOCK_DEPS=$(yq '.dependencies[] | "\(.name):\(.version)"' "$LOCK_FILE" | sort)

          echo "üì¶ Chart.yaml Dependencies:"
          echo "$YAML_DEPS"
          echo "üîí Chart.lock Dependencies:"
          echo "$LOCK_DEPS"

          if [ "$YAML_DEPS" != "$LOCK_DEPS" ]; then
            echo "‚ùå Mismatch between Chart.yaml and Chart.lock dependency versions!"
            echo "Please run 'helm dependency update charts/onelens-agent' to regenerate Chart.lock."
            exit 1
          else
            echo "‚úÖ Chart.lock matches the dependency versions in Chart.yaml"
          fi




      - name: All checks passed
        run: echo "‚úÖ All checks passed. No packaging or publishing steps executed."
